###Assignment

> 1.What is time complexity and what is its relation to algorithms?
A: Time complexity is a function that estimates the time a program will take to run. Algorithms are meant to be as efficient as possible and should be built with the smallest time complexity possible.

> 2. What is runtime?
A: Runtime is the amount of actual time a function will take to complete its task.

> 3.How is the runtime of an algorithm calculated?
A: Runtime is calculated by adding up all of the instructions in the algorithm based on the input. Then, remove any constants and keep only the largest term.

> 4.Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
a: Discussed in this checkpoint were (in order of efficient to least-efficient): Constant, Linear, Logarithmic, Log-Linear, Quadratic, and Exponential.
Not Discussed was the Cubic growth rate, which is represented by the time complexity of `O(n^3)`. It is more efficient than the exponential growth rate, but less efficient than the Quadratic growth rate.
Listed in order: Constant, Linear, Logarithmic, Log-Linear, Quadratic, CUBIC, and Exponential.

> 5.Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
A: A real-life example of a linear growth rate would be how much dog food I have to buy for every dog I adopt. The more dogs I adopt, I have to buy proportionally more dog food.

> 6.Determine the time complexity of the following snippet of code. It is commonly known as a linear search.
A: Time Complexity if a linear search is `O(n)`

```
  FUNCTION linearSearch(array, target)
     FOR each number in the array
       IF number = target THEN
         RETURN true
       END IF
     END FOR
     RETURN false
    END FUNCTION
```

> 7. Determine the time complexity of the following snippet of code.

        If you get stuck, read through the graphical representation section again.

A: Time Complexity if a quadratic grow rate is `O(n^2).`

```
    FUNCTION foo(array)
     FOR each number in the array
       FOR each number in the array
         print "Hello"
       END FOR
     END FOR
    END FUNCTION
    ```

> 8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.
A: Time Complexity if a a fibonacci sequence is exponential. The growth rate is `O(2^n)`.


```
    FUNCTION fibonacci(number)
     IF number < 1 THEN
       ERROR
     ELSE IF number = 1 or 2 THEN
       RETURN 1
     ELSE
       CALL fibonacci WITH number - 2 RETURNING twoBack
       CALL fibonacci WITH number - 1 RETURNING oneBack
       RETURN twoBack + oneBack
     END IF
    END FUNCTION
```

> 9. Out of the code snippets you just saw, which is the most time efficient?
A: The example in question #6 is the most efficient: the Linear growth rate. 
