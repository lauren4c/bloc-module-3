####Exercises

>1. What is a binary tree and what makes it unique to other trees?

A: A binary tree structure is one that each node may point to a left child and/or a right child.

>2. What is a heuristic?

A: It is a guess at the best answer to a problem quickly.

>3. What is another problem besides the shortest-path problem that requires the use of heuristics?

A: An internet search algorithm would be another use of heuristics because the algorithm has to quickly make a guess as to what the BEST results are for the user.

>4. What is the difference between a depth-first search and a breadth-first search?

A: The DFS goes down each branch of the tree before it explores further. A BFS explores each row of nodes before moving on.

>5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: A graph that is undirected, a-cyclic, and unweighted is like a linked list that has direction of travel in both ways. A tree would be another example, as the a-cylic nature provides for dead-ends. Because the graph is unweighted, there is no added or decreased cost when traversing nodes.

>6. What kind of graph is a binary search tree?

A: It is an undirected, unweighted and a-cylic because it produces dead ends and travels down before it comes back up. There is no "cost" to traversing between nodes.


#### Programming Questions
>For the following questions, describe in words how you could solve the problem and then do so. Use the depiction of the Binary Search Tree to refer to the examples.

> 1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.
Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

FUNCTION findValue(x)
  SET temp to root
  while temp still exists
    IF temp value is greater than x
      SET temp.right to temp

 if temp value is less than x
  SET temp.left to temp

  ELSE IF temp value is equal to x,
    Return "Value Exists"

  IF temp does not exist,
  return "Value does not exist."
end IF
end While
END FUNCTION

indValue(value) {
  var temp = this.root;
  while (temp !== null) {
    if (temp.value < value) {
      temp = temp.right;
    } else if (temp.value > value) {
      temp = temp.left;
    } else if (temp.value === value) {
      return "Value exists.";
    }
  }
  if (temp === null) {
    return "Value Does not exist.";
  }
}

findValue(10); //Value Exists
findValue(23); //Value does not exist.


> 2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.
Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

//We have to find the lowest common ancestor (LCA) between the n1 and n2, and then the total distance will be LCA distance to n1 PLUS LCA distance to n2.

FUNCTION findDistance(currentAncestor, n1, n2)
  if there is no current ancestor
    THEN currentAncestor = this.root

  if n1 is greater than n2
    SET temp to n2
    set n2 to n1
    set n1 to temp
  END IF

IF currentAncestor.value is greater than n1 AND currentAncestor.value is greater than n2
  return function findDistance of currentAncestor.left, n1, n2

IF currentAncestor.value is less than n1 AND currentAncestor.value is less than n2
    return function findDistance of currentAncestor.right, n1, n2

IF currentAncestor.value is greater than or equal to n1 AND currentAncestor.value is less than or equal to n2
      return function distanceFromRoot of currentAncestor and n1 PLUS function distanceFromRoot of currentAncestor and n2
END FUNCTION

function distanceFromRoot(ancestor, n)
  IF there is no ancestor OR ancestor is equal to n
    return 0
  END IF
  IF ancestor.value is greater than n
    return 1 plus function distanceFromRoot(ancestor.left, n)
  END IF
  IF ancestor.value is less than n
    return 1 plus function distanceFromRoot(ancestor.right, n)
    END IF
end function

findDistance(n1, n2, currentAncestor) {
  if (!currentAncestor) {
    currentAncestor = this.root;
  }
  if (n1 > n2) {
    let temp = n2;
    n2 = n1;
    n1 = temp;
  }

  if (currentAncestor.value > n1 && currentAncestor.value > n2) {
    return this.findDistance(currentAncestor.left, n1, n2);
  }
  if (currentAncestor.value < n1 && currentAncestor.value < n2) {
    return this.findDistance(currentAncestor.right, n1, n2);
  }
  if (currentAncestor.value >= n1 && currentAncestor.value <= n2) {
    return (
      this.distanceFromRoot(currentAncestor, n1) +
      this.distanceFromRoot(currentAncestor, n2)
    );
  }
}

distanceFromRoot(ancestor, n) {
  if (!ancestor || ancestor.value === n) {
    return 0;
  }
  if (ancestor.value > n) {
    return 1 + this.distanceFromRoot(ancestor.left, n);
  }
  if (ancestor.value < n) {
    return 1 + this.distanceFromRoot(ancestor.right, n);
  }
}


Here it is in practice:
https://repl.it/@lauren4c/VacantIntrepidUsernames
